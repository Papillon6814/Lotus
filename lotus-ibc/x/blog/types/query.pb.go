// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: blog/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # 3
type QueryGetTimedoutPostRequest struct {
}

func (m *QueryGetTimedoutPostRequest) Reset()         { *m = QueryGetTimedoutPostRequest{} }
func (m *QueryGetTimedoutPostRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTimedoutPostRequest) ProtoMessage()    {}
func (*QueryGetTimedoutPostRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e22cd6d352f3384, []int{0}
}
func (m *QueryGetTimedoutPostRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTimedoutPostRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTimedoutPostRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTimedoutPostRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTimedoutPostRequest.Merge(m, src)
}
func (m *QueryGetTimedoutPostRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTimedoutPostRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTimedoutPostRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTimedoutPostRequest proto.InternalMessageInfo

type QueryGetTimedoutPostResponse struct {
	TimedoutPost *TimedoutPost `protobuf:"bytes,1,opt,name=TimedoutPost,proto3" json:"TimedoutPost,omitempty"`
}

func (m *QueryGetTimedoutPostResponse) Reset()         { *m = QueryGetTimedoutPostResponse{} }
func (m *QueryGetTimedoutPostResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTimedoutPostResponse) ProtoMessage()    {}
func (*QueryGetTimedoutPostResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e22cd6d352f3384, []int{1}
}
func (m *QueryGetTimedoutPostResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTimedoutPostResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTimedoutPostResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTimedoutPostResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTimedoutPostResponse.Merge(m, src)
}
func (m *QueryGetTimedoutPostResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTimedoutPostResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTimedoutPostResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTimedoutPostResponse proto.InternalMessageInfo

func (m *QueryGetTimedoutPostResponse) GetTimedoutPost() *TimedoutPost {
	if m != nil {
		return m.TimedoutPost
	}
	return nil
}

type QueryGetSendPostRequest struct {
}

func (m *QueryGetSendPostRequest) Reset()         { *m = QueryGetSendPostRequest{} }
func (m *QueryGetSendPostRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSendPostRequest) ProtoMessage()    {}
func (*QueryGetSendPostRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e22cd6d352f3384, []int{2}
}
func (m *QueryGetSendPostRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSendPostRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSendPostRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSendPostRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSendPostRequest.Merge(m, src)
}
func (m *QueryGetSendPostRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSendPostRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSendPostRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSendPostRequest proto.InternalMessageInfo

type QueryGetSendPostResponse struct {
	SendPost *SendPost `protobuf:"bytes,1,opt,name=SendPost,proto3" json:"SendPost,omitempty"`
}

func (m *QueryGetSendPostResponse) Reset()         { *m = QueryGetSendPostResponse{} }
func (m *QueryGetSendPostResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSendPostResponse) ProtoMessage()    {}
func (*QueryGetSendPostResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e22cd6d352f3384, []int{3}
}
func (m *QueryGetSendPostResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSendPostResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSendPostResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSendPostResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSendPostResponse.Merge(m, src)
}
func (m *QueryGetSendPostResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSendPostResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSendPostResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSendPostResponse proto.InternalMessageInfo

func (m *QueryGetSendPostResponse) GetSendPost() *SendPost {
	if m != nil {
		return m.SendPost
	}
	return nil
}

type QueryGetPostRequest struct {
}

func (m *QueryGetPostRequest) Reset()         { *m = QueryGetPostRequest{} }
func (m *QueryGetPostRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPostRequest) ProtoMessage()    {}
func (*QueryGetPostRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e22cd6d352f3384, []int{4}
}
func (m *QueryGetPostRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPostRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPostRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPostRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPostRequest.Merge(m, src)
}
func (m *QueryGetPostRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPostRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPostRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPostRequest proto.InternalMessageInfo

type QueryGetPostResponse struct {
	Post *Post `protobuf:"bytes,1,opt,name=Post,proto3" json:"Post,omitempty"`
}

func (m *QueryGetPostResponse) Reset()         { *m = QueryGetPostResponse{} }
func (m *QueryGetPostResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPostResponse) ProtoMessage()    {}
func (*QueryGetPostResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e22cd6d352f3384, []int{5}
}
func (m *QueryGetPostResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPostResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPostResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPostResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPostResponse.Merge(m, src)
}
func (m *QueryGetPostResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPostResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPostResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPostResponse proto.InternalMessageInfo

func (m *QueryGetPostResponse) GetPost() *Post {
	if m != nil {
		return m.Post
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetTimedoutPostRequest)(nil), "papillon6814.lotusibc.blog.QueryGetTimedoutPostRequest")
	proto.RegisterType((*QueryGetTimedoutPostResponse)(nil), "papillon6814.lotusibc.blog.QueryGetTimedoutPostResponse")
	proto.RegisterType((*QueryGetSendPostRequest)(nil), "papillon6814.lotusibc.blog.QueryGetSendPostRequest")
	proto.RegisterType((*QueryGetSendPostResponse)(nil), "papillon6814.lotusibc.blog.QueryGetSendPostResponse")
	proto.RegisterType((*QueryGetPostRequest)(nil), "papillon6814.lotusibc.blog.QueryGetPostRequest")
	proto.RegisterType((*QueryGetPostResponse)(nil), "papillon6814.lotusibc.blog.QueryGetPostResponse")
}

func init() { proto.RegisterFile("blog/query.proto", fileDescriptor_6e22cd6d352f3384) }

var fileDescriptor_6e22cd6d352f3384 = []byte{
	// 438 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcb, 0xea, 0xd3, 0x40,
	0x14, 0xc6, 0x3b, 0xde, 0x90, 0x51, 0x50, 0xc6, 0x8a, 0x35, 0xd6, 0x50, 0x42, 0x91, 0x50, 0x34,
	0xd3, 0x1b, 0xda, 0xa5, 0xb8, 0xd1, 0x45, 0x17, 0xde, 0x56, 0x22, 0x48, 0xd2, 0x0e, 0x31, 0x90,
	0xce, 0x99, 0x76, 0x26, 0x62, 0xb7, 0x3e, 0x81, 0xd0, 0x47, 0xf0, 0x11, 0x7c, 0x09, 0x97, 0x05,
	0x37, 0x2e, 0xa5, 0xf5, 0x25, 0xdc, 0x49, 0x26, 0x93, 0x36, 0xf1, 0xdf, 0x7f, 0x68, 0xb7, 0xe7,
	0x9c, 0xef, 0xfb, 0x7e, 0x33, 0x67, 0x06, 0xdf, 0x0c, 0x62, 0x08, 0xe9, 0x3c, 0x61, 0x8b, 0xa5,
	0x27, 0x16, 0xa0, 0x80, 0x58, 0xc2, 0x17, 0x51, 0x1c, 0x03, 0x7f, 0x3c, 0xea, 0x0d, 0xbd, 0x18,
	0x54, 0x22, 0xa3, 0x60, 0xe2, 0xa5, 0x73, 0x56, 0x33, 0x04, 0x08, 0x63, 0x46, 0x7d, 0x11, 0x51,
	0x9f, 0x73, 0x50, 0xbe, 0x8a, 0x80, 0xcb, 0x4c, 0x69, 0x75, 0x26, 0x20, 0x67, 0x20, 0x69, 0xe0,
	0x4b, 0x96, 0x59, 0xd2, 0x4f, 0xbd, 0x80, 0x29, 0xbf, 0x47, 0x85, 0x1f, 0x46, 0x5c, 0x0f, 0x9b,
	0xd9, 0x86, 0xce, 0x55, 0xd1, 0x8c, 0x4d, 0x21, 0x51, 0x1f, 0x04, 0x48, 0x65, 0x3a, 0x75, 0xdd,
	0x91, 0x8c, 0x4f, 0x8b, 0xd5, 0x1b, 0xba, 0xba, 0x2f, 0x38, 0xf7, 0xf1, 0xbd, 0x57, 0x69, 0xc4,
	0x73, 0xa6, 0xde, 0x1a, 0x97, 0x97, 0x20, 0xd5, 0x6b, 0x36, 0x4f, 0x98, 0x54, 0x4e, 0x8c, 0x9b,
	0x87, 0xdb, 0x52, 0x00, 0x97, 0x8c, 0x8c, 0xf1, 0xf5, 0x62, 0xbd, 0x81, 0x5a, 0xc8, 0xbd, 0xd6,
	0x77, 0xbd, 0xf3, 0x0f, 0xef, 0x95, 0x7c, 0x4a, 0x6a, 0xe7, 0x2e, 0xbe, 0x93, 0xa7, 0xbd, 0x61,
	0x7c, 0x5a, 0x04, 0x79, 0x8f, 0x1b, 0x67, 0x5b, 0x06, 0xe2, 0x29, 0xbe, 0x9a, 0xd7, 0x0c, 0x40,
	0xbb, 0x0a, 0x60, 0xa7, 0xdf, 0xa9, 0x9c, 0xdb, 0xf8, 0x56, 0xee, 0x5e, 0x0c, 0x1d, 0xe3, 0x7a,
	0xb9, 0x6c, 0x02, 0x87, 0xf8, 0x52, 0x21, 0xac, 0x55, 0x15, 0xa6, 0x75, 0x7a, 0xba, 0xff, 0xf7,
	0x22, 0xbe, 0xac, 0xed, 0xc8, 0x77, 0x54, 0xbe, 0x36, 0xf2, 0xa4, 0xca, 0xa2, 0x62, 0x3f, 0xd6,
	0xe8, 0x74, 0x61, 0x76, 0x06, 0xa7, 0xfb, 0xe5, 0xe7, 0x9f, 0xd5, 0x85, 0x0e, 0x71, 0x69, 0xd1,
	0x81, 0xe6, 0x0e, 0xb4, 0xf4, 0xb0, 0x34, 0xe4, 0x37, 0xb4, 0xbf, 0x67, 0x32, 0x38, 0x26, 0xf8,
	0xbf, 0x25, 0x5a, 0xc3, 0xd3, 0x44, 0x86, 0xf4, 0xa1, 0x26, 0x7d, 0x40, 0xda, 0x55, 0xa4, 0x32,
	0x07, 0x5b, 0xa1, 0x6c, 0x39, 0x84, 0x1e, 0x13, 0x56, 0xa4, 0xeb, 0x1e, 0x2f, 0x30, 0x64, 0xae,
	0x26, 0x73, 0x48, 0xab, 0x8a, 0x2c, 0xfd, 0x6c, 0xcf, 0x5e, 0xfc, 0xd8, 0xd8, 0x68, 0xbd, 0xb1,
	0xd1, 0xef, 0x8d, 0x8d, 0xbe, 0x6e, 0xed, 0xda, 0x7a, 0x6b, 0xd7, 0x7e, 0x6d, 0xed, 0xda, 0x3b,
	0x2f, 0x8c, 0xd4, 0xc7, 0x24, 0xf0, 0x26, 0x30, 0x3b, 0xe0, 0xf2, 0x28, 0xb5, 0xf9, 0x6c, 0x96,
	0xb1, 0x14, 0x4c, 0x06, 0x57, 0xf4, 0xbf, 0x1d, 0xfc, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x5a, 0x60,
	0x3f, 0x95, 0x72, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a timedoutPost by index.
	TimedoutPost(ctx context.Context, in *QueryGetTimedoutPostRequest, opts ...grpc.CallOption) (*QueryGetTimedoutPostResponse, error)
	// Queries a sendPost by index.
	SendPost(ctx context.Context, in *QueryGetSendPostRequest, opts ...grpc.CallOption) (*QueryGetSendPostResponse, error)
	// Queries a post by index.
	Post(ctx context.Context, in *QueryGetPostRequest, opts ...grpc.CallOption) (*QueryGetPostResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) TimedoutPost(ctx context.Context, in *QueryGetTimedoutPostRequest, opts ...grpc.CallOption) (*QueryGetTimedoutPostResponse, error) {
	out := new(QueryGetTimedoutPostResponse)
	err := c.cc.Invoke(ctx, "/papillon6814.lotusibc.blog.Query/TimedoutPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SendPost(ctx context.Context, in *QueryGetSendPostRequest, opts ...grpc.CallOption) (*QueryGetSendPostResponse, error) {
	out := new(QueryGetSendPostResponse)
	err := c.cc.Invoke(ctx, "/papillon6814.lotusibc.blog.Query/SendPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Post(ctx context.Context, in *QueryGetPostRequest, opts ...grpc.CallOption) (*QueryGetPostResponse, error) {
	out := new(QueryGetPostResponse)
	err := c.cc.Invoke(ctx, "/papillon6814.lotusibc.blog.Query/Post", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a timedoutPost by index.
	TimedoutPost(context.Context, *QueryGetTimedoutPostRequest) (*QueryGetTimedoutPostResponse, error)
	// Queries a sendPost by index.
	SendPost(context.Context, *QueryGetSendPostRequest) (*QueryGetSendPostResponse, error)
	// Queries a post by index.
	Post(context.Context, *QueryGetPostRequest) (*QueryGetPostResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) TimedoutPost(ctx context.Context, req *QueryGetTimedoutPostRequest) (*QueryGetTimedoutPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimedoutPost not implemented")
}
func (*UnimplementedQueryServer) SendPost(ctx context.Context, req *QueryGetSendPostRequest) (*QueryGetSendPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPost not implemented")
}
func (*UnimplementedQueryServer) Post(ctx context.Context, req *QueryGetPostRequest) (*QueryGetPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Post not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_TimedoutPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTimedoutPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TimedoutPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/papillon6814.lotusibc.blog.Query/TimedoutPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TimedoutPost(ctx, req.(*QueryGetTimedoutPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SendPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSendPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SendPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/papillon6814.lotusibc.blog.Query/SendPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SendPost(ctx, req.(*QueryGetSendPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Post_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Post(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/papillon6814.lotusibc.blog.Query/Post",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Post(ctx, req.(*QueryGetPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "papillon6814.lotusibc.blog.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TimedoutPost",
			Handler:    _Query_TimedoutPost_Handler,
		},
		{
			MethodName: "SendPost",
			Handler:    _Query_SendPost_Handler,
		},
		{
			MethodName: "Post",
			Handler:    _Query_Post_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog/query.proto",
}

func (m *QueryGetTimedoutPostRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTimedoutPostRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTimedoutPostRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetTimedoutPostResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTimedoutPostResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTimedoutPostResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimedoutPost != nil {
		{
			size, err := m.TimedoutPost.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSendPostRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSendPostRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSendPostRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetSendPostResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSendPostResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSendPostResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SendPost != nil {
		{
			size, err := m.SendPost.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPostRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPostRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPostRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetPostResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPostResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPostResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Post != nil {
		{
			size, err := m.Post.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetTimedoutPostRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetTimedoutPostResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimedoutPost != nil {
		l = m.TimedoutPost.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSendPostRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetSendPostResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SendPost != nil {
		l = m.SendPost.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPostRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetPostResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Post != nil {
		l = m.Post.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetTimedoutPostRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTimedoutPostRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTimedoutPostRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTimedoutPostResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTimedoutPostResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTimedoutPostResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimedoutPost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimedoutPost == nil {
				m.TimedoutPost = &TimedoutPost{}
			}
			if err := m.TimedoutPost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSendPostRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSendPostRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSendPostRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSendPostResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSendPostResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSendPostResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendPost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SendPost == nil {
				m.SendPost = &SendPost{}
			}
			if err := m.SendPost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPostRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPostRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPostRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPostResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPostResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPostResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Post", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Post == nil {
				m.Post = &Post{}
			}
			if err := m.Post.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
